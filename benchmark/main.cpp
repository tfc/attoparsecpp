#include <cassert>

#include <parser.hpp>
#include <math_expression.hpp>

#define BENCHPRESS_CONFIG_MAIN
#include "benchpress/benchpress.hpp"


BENCHMARK("vector<int> of 10 items", [](benchpress::context* ctx) {
    const auto p {manyV(token(integer))};
    const std::string s {"1 2 3 4 5 6 7 8 9 10"};

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        auto r {run_parser(p, s)};
        benchpress::escape(r->first.data());
    }
})

BENCHMARK("vector<int> of 100 items", [](benchpress::context* ctx) {
    const auto p {manyV(token(integer))};
    const std::string s {
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        auto r {run_parser(p, s)};
        benchpress::escape(r->first.data());
    }
})

BENCHMARK("vector<int> of 1000 items", [](benchpress::context* ctx) {
    const auto p {manyV(token(integer))};
    const std::string s {
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "

        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
        "1 2 3 4 5 6 7 8 9 10 "
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        auto r {run_parser(p, s)};
        benchpress::escape(r->first.data());
    }
})

BENCHMARK("sum of 10 ints", [](benchpress::context* ctx) {
    const std::string s {"1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"};

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 55);
    }
})

BENCHMARK("sum of 100 ints", [](benchpress::context* ctx) {
    const std::string s {
        "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 550);
    }
})

BENCHMARK("sum of 1000 ints", [](benchpress::context* ctx) {
    const std::string s {
        "1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"

        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
        " + 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10"
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 5500);
    }
})

BENCHMARK("product of 10 ints", [](benchpress::context* ctx) {
    const std::string s {"1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"};

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 1);
    }
})

BENCHMARK("product of 100 ints", [](benchpress::context* ctx) {
    const std::string s {
        "1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 1);
    }
})

BENCHMARK("product of 1000 ints", [](benchpress::context* ctx) {
    const std::string s {
        "1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"

        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
        " * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1 * 1"
    };

    for (size_t i = 0; i < ctx->num_iterations(); ++i) {
        const auto r {run_parser(expr, s)};
        assert(r->first == 1);
    }
})
